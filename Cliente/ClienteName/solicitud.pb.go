// Code generated by protoc-gen-go.
// source: solicitud.proto
// DO NOT EDIT!

/*
Package ClienteName is a generated protocol buffer package.

It is generated from these files:
	solicitud.proto

It has these top-level messages:
	Message
*/
package ClienteName

import (
	proto "github.com/golang/protobuf/proto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Message struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func init() {
}

// Client API for NameService service

type NameServiceClient interface {
	SolicitudCliente(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type nameServiceClient struct {
	cc *grpc.ClientConn
}

func NewNameServiceClient(cc *grpc.ClientConn) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) SolicitudCliente(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/ClienteName.NameService/SolicitudCliente", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NameService service

type NameServiceServer interface {
	SolicitudCliente(context.Context, *Message) (*Message, error)
}

func RegisterNameServiceServer(s *grpc.Server, srv NameServiceServer) {
	s.RegisterService(&_NameService_serviceDesc, srv)
}

func _NameService_SolicitudCliente_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NameServiceServer).SolicitudCliente(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _NameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ClienteName.NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolicitudCliente",
			Handler:    _NameService_SolicitudCliente_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
