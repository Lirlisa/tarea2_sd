// Code generated by protoc-gen-go.
// source: libros.proto
// DO NOT EDIT!

/*
Package libros is a generated protocol buffer package.

It is generated from these files:
	libros.proto

It has these top-level messages:
	Chunk
*/
package libros

import (
	proto "github.com/golang/protobuf/proto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Chunk struct {
	Titulo      string `protobuf:"bytes,1,opt,name=titulo" json:"titulo,omitempty"`
	Totalchunk  uint32 `protobuf:"varint,2,opt,name=totalchunk" json:"totalchunk,omitempty"`
	Chunkactual uint32 `protobuf:"varint,3,opt,name=chunkactual" json:"chunkactual,omitempty"`
	Data        []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}

func init() {
}

// Client API for Interacciones service

type InteraccionesClient interface {
	Subir(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Chunk, error)
}

type interaccionesClient struct {
	cc *grpc.ClientConn
}

func NewInteraccionesClient(cc *grpc.ClientConn) InteraccionesClient {
	return &interaccionesClient{cc}
}

func (c *interaccionesClient) Subir(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := grpc.Invoke(ctx, "/libros.Interacciones/Subir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Interacciones service

type InteraccionesServer interface {
	Subir(context.Context, *Chunk) (*Chunk, error)
}

func RegisterInteraccionesServer(s *grpc.Server, srv InteraccionesServer) {
	s.RegisterService(&_Interacciones_serviceDesc, srv)
}

func _Interacciones_Subir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(InteraccionesServer).Subir(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Interacciones_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libros.Interacciones",
	HandlerType: (*InteraccionesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subir",
			Handler:    _Interacciones_Subir_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
